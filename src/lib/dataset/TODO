/**
 * Cost for conjugate planes
 * 
 * <center><img style="width:50%; height:50%;" src="media://conjugate.png"></center>
 * <center><blockquote><i>
 * Relation between a shear fracture and the three principales stresses
 * </i></blockquote></center>
 * 
 * @example
 * ```ts
 * const data = new ConjugateData({
 *     dataframe,
 *     measure: 'normals',
 *     compute: ['u1', 'u2', 'u3'],
 *     weight: 1,
 *     weights: 'ptsWeights',
 *     friction: 60,
 *     project: true
 * })
 * ```
 * @see [[Data]]
 * @see [[monteCarlo]]
 * @see [[createData]]
 * @category Geology
 */
export class ConjugateData extends Data {
    theta   = Math.PI*(45 - 60/2)/180
    project = false

    constructor(
        {friction, project, dataframe, measure, compute, weights, weight}:
        {friction?: number, project?: boolean, dataframe: DataFrame, measure: string, compute: string[], weights?: string, weight?: number}
    ) {
        super({dataframe, measure, compute, weights, weight})
        
        if (friction!==undefined) this.theta  = Math.PI*(45 - friction/2)/180
        if (project!==undefined) this.project = project
    }

    name() {return 'ConjugateData'}

    costs(data: Serie | Alpha): Serie {
        const d = this.generateData(data)

        if (d.itemSize !== 6) throw new Error('provided Serie must have itemSize = 6 (aka, stress')
        
        if (this.project) {
            return this.measure.map( (n1: number[], i: number) => {
                const L  = Math.sqrt(n1[0]**2 + n1[1]**2)
                const nn = [n1[0]/L, n1[1]/L, 0]
                const N  = this.fractureNormal(d.itemAt(i) as vec.Vector6) // Sigma2, so very simple
                return this.fractureCost(nn as vec.Vector3, N as vec.Vector3)
            })
        }
    
        //const theta  = Math.PI*(45.0 - fric/2.0)/180
        return normalize(this.measure).map( (normal, i) => {
            const conjugate = this.conjugateNormals(d.itemAt(i) as vec.Vector6)
            const c1        = this.fractureCost(normal, conjugate.n1 as vec.Vector3)
            const c2        = this.fractureCost(normal, conjugate.n2 as vec.Vector3)
            return Math.min(c1, c2)
        })
    }

    generate(alpha: Alpha): Serie {
        throw new Error('TODO')
        //return undefined
    }

    // ------------------------

    private conjugateNormals = (stress: vec.Vector6) => {
        const e = eigen(stress)
        const nS3 = [-e.vectors[0], -e.vectors[1], -e.vectors[2]] as vec.Vector3
        const v2  = [-e.vectors[3], -e.vectors[4], -e.vectors[5]] as vec.Vector3
        const v3  = [-e.vectors[6], -e.vectors[7], -e.vectors[8]] as vec.Vector3
        return {
            n1: rotateAxis(v2,  this.theta, v3), 
            n2: rotateAxis(v2, -this.theta, nS3)
        }
    }
    
    private fractureNormal = (stress: vec.Vector6) => {
        const e = eigen(stress)
        const v2 = [e[3], e[4], e[5]]
        if (this.project) {
            const d = Math.sqrt(v2[0]**2 + v2[1]**2)
            v2[0] /= d
            v2[1] /= d
            v2[2]  = 0
        }
        return [v2[1], -v2[0], v2[2]] // orthogonal projected
    }

    private fractureCost = (n: vec.Vector3, N: vec.Vector3) => {
        return 1.0 - Math.abs(vec.dot(n,N))
    }
}

/**
 * Generate from stress data either 2 series representing the normals of the conjugate planes,
 * or one serie if projected = true (direction of S2). For the former case, the friction angle
 * is used. For the later, friction angle is irrelevant.
 * @example
 * ```ts
 * const conjugates = geop.generateConjugates({ // {n1: Serie, n2: Serie}
 *      stress: computedStressSerie,
 *      friction: 30,
 *      projected: false
 * })
 * console.log( conjugates.n1, conjugates.n2 )
 * 
 * const conjugate = geop.generateConjugates({ // Serie
 *      stress: computedStressSerie,
 *      friction: 30,
 *      projected: true
 * })
 * console.log( conjugate )
 * ```
 * @see [[ConjugateData]]
 * @category Geology
 */
export function generateConjugates(
    {stress, friction, projected=false}:
    {stress: Serie, friction: number, projected?: boolean}): {n1: Serie, n2: Serie} | Serie
{
    if (stress === undefined) {
        throw new Error('provided stress Serie is undefined')
    }
    if (friction === undefined) {
        throw new Error('provided friction is undefined')
    }
    if (projected === true) {
        return stress.map( s => {
            const e = eigen(s).vectors
            const v2 = [e[3], e[4], e[5]]
            if (projected === true) {
                const d = Math.sqrt(v2[0]**2 + v2[1]**2)
                v2[0] /= d
                v2[1] /= d
                v2[2]  = 0
            }
            return [v2[1], -v2[0], v2[2]]
        })
    }

    const theta  = Math.PI*(45 - friction/2)/180

    return {
        n1: stress.map( s => {
            const e = eigen(s).vectors
            const v2  = [-e[3], -e[4], -e[5]] as vec.Vector3
            const v3  = [-e[6], -e[7], -e[8]] as vec.Vector3
            return rotateAxis(v2,  theta, v3)
        }),
        n2: stress.map( s => {
            const e = eigen(s).vectors
            const nS3 = [-e[0], -e[1], -e[2]] as vec.Vector3
            const v2  = [-e[3], -e[4], -e[5]] as vec.Vector3
            return rotateAxis(v2, -theta, nS3)
        })
    }
}
